<%
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
include('/controllers/login/validator.jag');
include('/controllers/menu/menu_generator.jag');

var log = new Log("apachestratos.applications_form"),
        error = [],
        list_data,
        caramel = require('caramel'),
        context = caramel.configs().context,
        menuJson = require('/controllers/menu/menu.json'),
        util = require('/controllers/rest/rest_calls.jag'),
        uriMatcher = new URIMatcher(request.getRequestURI()),
        elements = uriMatcher.match('/{context}/applications/{formtype}/'),
        breadcrumbPathLevelOne = 'applications',
        formDataEdit = topologyData = editorGroups = editorCartridges = applicationHbs ='',
        isEdit  = isForm = false,
        userPermissions = session.get('PERMISSIONS');

//create left menu
var leftMenu = menuGenerator(context, menuJson.menu, userPermissions);


if (!elements) {
    elements = uriMatcher.match('/{context}/applications/{formtype}/{action}/');

    if(!elements){
        elements = uriMatcher.match('/{context}/applications/{formtype}/{applicationId}/{action}');
        var applicationName = elements.applicationId;
        //get application json
        var applicationJSON = util.RESTCalls.getApplicationJSON(applicationName);

        if(elements.action == 'view'){
            applicationHbs = 'applicationView';
        }else if(elements.action == 'deploy'){
            applicationHbs = 'applicationDeploy';
        }

    }else{
        isForm = true;
        if (elements.formtype == 'applications' && elements.action != 'new') {

            applicationHbs = 'applicationTopology';
            topologyData = util.RESTCalls.getApplicationTopology(elements.action);
        }else if(elements.formtype == 'applications' && elements.action == 'new'){
            applicationHbs = 'applicationEditor';
            editorGroups =  util.RESTCalls.getGroups();
            editorCartridges = util.RESTCalls.getCartridges();
        }else  if(elements.formtype == 'groups' && elements.action == 'new'){
            applicationHbs = 'applicationsGroupEditor';
            editorCartridges = util.RESTCalls.getCartridges();
        }else  if(elements.formtype == 'groups' && elements.action != 'new'){
            isEdit = true;

        }

    }

}

try {
    var formData = require('controllers/forms/schema/applications/' + elements.formtype + '.json'),
            formDataRaw = require('controllers/forms/default/applications/' + elements.formtype + '.json'),
            formTitle = formData.title,
            buttonText = formData.name;
} catch (e) {
    log.error(e.message);
    error.push({"errorMessage": e.message});
}

var formtype = elements.formtype;

switch (formtype) {
    case "groups":
        list_data = util.RESTCalls.getGroups();
        if (list_data && list_data.length === 0) {
            list_data = null;
        }else{
            formDataEdit = list_data;
            for (specNumber in list_data) {
                if (list_data[specNumber].name == elements.action) {
                    formDataEdit = list_data[specNumber];
                }
            }
        }
        break;
    case "applications":
        list_data = util.RESTCalls.getApplications();
        if (list_data && list_data.length === 0) {
            list_data = null;
        }
        break;
    default:
        error.push({"errorMessage":"Incorrect resource path found"});
}
var caramelData = {
    breadcrumbPathLevelOne: breadcrumbPathLevelOne,
    breadcrumbPathLevelTwo: elements.formtype,
    left_menu: leftMenu,
    isForm: isForm,
    isEdit: isEdit,
    appName: elements.action,
    topologyData: JSON.stringify(topologyData),
    editorGroups: JSON.stringify(editorGroups),
    editorCartridges: JSON.stringify(editorCartridges),
    applicationHbs: applicationHbs,
    applicationName:applicationName,
    applicationJSON:JSON.stringify(applicationJSON),
    formTitle: formTitle,
    formDataRaw: JSON.stringify(formDataRaw),
    formtype:elements.formtype,
    //formDataRaw: JSON.stringify(partition_data.partition[0]),
    formDataEdit: JSON.stringify(formDataEdit),
    formData: JSON.stringify(formData),
    list_data: list_data,
    error: error
}


caramel.render(caramelData);

%>